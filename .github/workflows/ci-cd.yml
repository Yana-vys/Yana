name: Python GitFlow CI/CD Pipeline

on:
  push:
    branches: [ "develop", "feature/*", "hotfix/*" ]
  pull_request:
    branches: [ "develop" ]
  release:
    types: [published]

jobs:
  # --- CI Часть (тестирование) ---
  test:
    name: "Test (Python ${{ matrix.python-version }})"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]  # Тестируем на двух версиях Python
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov
          pip install flake8 black  # Добавляем линтеры

      - name: Run linters
        run: |
          flake8 src --count --show-source --statistics
          black --check src

      - name: Run tests
        run: pytest -v --cov=src --cov-report=xml

      - name: Upload coverage
        uses: codecov/codecov-action@v3

  # --- Сборка dev-образа для develop ---
  build-dev:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'  # Только для develop ветки
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push dev image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/app:dev .
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/app:dev

  # --- Продакшен-деплой (main/hotfix) ---
  deploy-prod:
    needs: test
    runs-on: self-hosted  # Запускаем на своем сервере
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/hotfix/')
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Stop old container
        run: docker rm -f app-prod || true

      - name: Deploy latest image
        run: |
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/app:latest
          docker run -d \
            --name app-prod \
            -p 8000:8000 \
            -e ENV=production \
            --restart unless-stopped \
            ${{ secrets.DOCKERHUB_USERNAME }}/app:latest

      - name: Notify Slack
        uses: slackapi/slack-github-action@v1
        if: always()
        with:
          slack-message: "Деплой на прод завершен: ${{ github.ref }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # --- Создание релиза (при мерже в main) ---
  create-release:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v$(date +%Y.%m.%d)
          release_name: Release v$(date +%Y.%m.%d)
          draft: false
          prerelease: false
